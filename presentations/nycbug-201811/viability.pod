=encoding utf8

=head1 Ensuring Perl's Viability on FreeBSD: A NYCBUG-NY.PM Collaboration

=head2 Authors

James E Keenan (jkeenan@cpan.org)

Andrew Villano

=head2 Location

    New York City BSD User Group / New York Perlmongers
    November 07 2018

=head2 Synopsis

How have NYCBUG and New York Perlmongers collaborated to ensure the continued
viability of Perl 5 on FreeBSD?

=head2 Introduction

Tonight Andrew Villano and I report on the progress of a collaboration between
the New York City BSD User Group (NYCBUG) and New York Perlmongers (NY.pm) to
ensure the continued viabilty of the Perl 5 programming language and ecosystem
on the FreeBSD operating system.  We'll consider:

=over 4

=item * The Perl 5 core distribution and development process

=item * Testing the Perl 5 core distribution on various platforms

=item * The Perl 5 ecosystem:  CPAN

=item * Testing CPAN on various platforms:  CPANtesters

=item * The Perl 5 development process in relation to CPAN

=item * The need for diversity in testing environments

=item * The NYCBUG-NY.pm collaboration

=item * Preparation of the testing environment

=item * Testing Perl monthly development releases against CPAN on FreeBSD

=item * Impacts

=back

=head2 The Perl 5 Core Distribution and Development Process

When we speak of I<"Perl"> tonight we're talking about Perl 5, the version of
the language introduced by Larry Wall in 1994 and under continuous development
ever since.  Perl's development takes place on an annual cycle.  Every year a
new production version of Perl is released in late spring.  The current
production version is
L<perl-5.28.0|ftp://ftp.cpan.org/pub/CPAN/src/perl-5.28.0.tar.gz>,
released in June of this year.  The fact that
the C<28> in the middle of that version is an I<even> number indicates a
production version.  With the release of 5.28.0 we began a new annual
development cycle in which we issue monthly development releases whose middle
number is the next higher I<odd> number: C<5.29.0> came out in July, C<5.29.1>
in August, and so forth -- so that we're now up to C<5.29.4>.  On a daily
basis changes to the source code are made to a L<git repository housed at perl.org|https://perl5.git.perl.org/>.  Once a month those changes are
rolled up into a tarball for the next development release of the Perl 5 core
distribution.

When we speak of the I<"Perl 5 core distribution"> we mean the source code
required to build the F<perl> executable plus a set of libraries -- usually
referred to as I<modules> -- that are shipped with the core distribution because
they are essential or highly useful for use of Perl in production
environments.  If, say, you are a sysadmin who primarily uses Perl to automate
system administration tasks, chances are that almost all the functionality you
need can be found in the core distribution.

=head2 Testing the Perl 5 Core Distribution

The Perl 5 core distribution comes with a test suite that has been built up
over a 24-year period.  People who have a commit bit to the core distribution
are expected to run the test suite on their local machines before pushing
commits to the repository.  That provides a basic proof that the code changes
do what they claim to do and do no harm to the rest of the core distribution
-- at least on that committer's platform.

But Perl 5 has been ported to over 100 different platforms over the course of
its lifetime.  How do we guarantee that changes in the core distribution work
on those platforms?  The answer is I<smoke-testing>.  A network of volunteers
maintain machines -- mostly virtual machines, in all likelihood -- which are
set up with different operating systems, different versions of those operating
systems and a variety of C compilers on those different OS versions.  Those
volunteers then listen for updates to the core distribution and the test suite
for different permutations of OS, OS version, C compiler and F<perl>
configuration options.  The results are 
transmitted to a central website,
L<test-smoke.org|http://perl5.test-smoke.org/search>.  The code providing
this functionality is largely found in the
L<Test-Smoke library found on CPAN|https://metacpan.org/release/Test-Smoke> 
-- a library which some of the best Perl hackers in the world have been
working on at our Perl QA Hackathons since 2002.

If you were to turn the clock back two-and-a-half years and go to this
website, you would see that the overwhelming majority of smoke-test reports we
were receiving were generated on Linux.  More specifically, you would see that
I<none> had been received from FreeBSD since the current version of the
website first appeared in May 2011.  We knew from other sources that our
I<annual production> releases were passing all their tests on various versions
of FreeBSD.  But we lacked data as to whether our I<monthly development>
releases -- much less individual F<git> commits -- were working or not.

I set out to tackle this problem by learning how to install virtual machines
on my Ubuntu Linux laptop.  That meant learning VirtualBox, VMWare and Vagrant
-- non-trivial tasks -- but eventually I was able to install a FreeBSD-10.3 VM
on my laptop, install Test-Smoke and generate
L<my first Perl 5 smoke-test report on FreeBSD|http://perl5.test-smoke.org/report/48878>.
Happily, the grade on my first smoke-test was C<PASS>.

When FreeBSD-11.0 came out later in 2016 I set up a separate VM for that
version on my laptop and began smoke-testing the core distribution there.
Unfortunately, 
L<my first smoke-test report on FreeBSD-11|http://perl5.test-smoke.org/report/50778>
received a grade of C<FAIL>.  The tests that failed dealt with locale-related
code which had been added to the core distribution in the five months between
the May 2016 production release of F<perl-5.24> and the date of my first
smoke-test on FreeBSD-11 in October 2016.  Those same tests were C<PASS>ing on
Linux and, for the most part, on FreeBSD-10.3 during those five months.  But
since we weren't getting smoke tests on FreeBSD-11 during that period, we had
no idea we were "breaking" Perl on that OS version.  It took three months of
collaboration between Karl Williamson, Perl's locales expert, and myself to
get all our tests to steadily C<PASS> on FreeBSD-11.

Smoke-testing the Perl 5 core distribution over the course of an annual
development cycle is therefore crucial for averting bugs in the annual
production release.

=head2 CPAN: The Perl 5 Ecosystem

The Perl core distribution is, however, a relatively small part of the overall
Perl ecosphere.  That ecosphere largely consists of the open source modules
found on L<CPAN -- the Comprehensive Perl Archive
Network|https://www.cpan.org/>, an archive founded in 1995 and now consisting
of 175,000 modules in 39,000 distributions contributed by more than 13,000
authors.  Many people consider CPAN to be Perl's true I<"killer app">.

The usefulness of any given CPAN module depends, however, not just on its own
functionality but on whether it can be used with different versions of F<perl>
and on different operating systems.  For nearly two decades the L<CPANtesters
project|http://www.cpantesters.org/> has provided a way to determine just
that.  If, for example, I want to see my CPAN module
L<List::Compare|https://metacpan.org/release/List-Compare> works on FreeBSD, I
can enter data into a simple web form and get L<the results|http://matrix.cpantesters.org/?dist=List-Compare;os=freebsd;reports=1>.

=head2 The Perl 5 Development Process in Relation to CPAN

When I ask, "Can a given CPAN module work with different versions of F<perl> on
FreeBSD?", I can refer both to I<past> production releases of F<perl> but to
I<future> versions as well -- at least insofar as a "future" version of
F<perl> is reflected in the latest monthly development release.  This enables
us to ask an important quality-assurance question:  I<"Do the changes we've
made in the core distribution since our last production release 'break' any
CPAN modules?">  If they do, then we need to evaluate the benefits of changes
to the core distribution against the potential disruption to users of such
CPAN modules.

In the Perl 5 core repository, the main development branch is known, for
arcane historical reasons, as I<blead> rather than, say, I<master>.  So among
Perl developers this question is often referred to in shorthand as I<"Does blead
break CPAN?">  If so, to what extent?  Under which configurations and on which
operating systems?  Is the cause of the breakage found solely within changes
in the core distribution?  Or have changes in the core exposed flaws in the
code of a "broken" CPAN module?  How do we address such breakage?

Over the past five years the Perl community has addressed these questions by
formulating a concept called the I<"CPAN river">.  CPAN modules depend upon
the core distribution, but they also depend on other CPAN modules.  Imagine
the core distribution as a stream which rises high in the mountains.  As it
flows down to the sea, other streams -- those are the modules on CPAN -- feed
into it and it becomes a mighty river.  Eventually the river reaches the sea
-- which is all the Perl code in production all over the world.

But now imagine that there's pollution "upstream" or that a dam is built which
impedes the flow of the CPAN river.  Then all the "downstream" users suffer.
What that suggests is that if we want to find out whether blead has broken
CPAN, we start by testing modules "high upstream" on the CPAN river against
Perl monthly development releases, then proceed downstream from there.  It's
probably not feasible to test all 39,000 CPAN distributions against blead, but
if we test a large sample of them we're likely to get a good picture of the
impact which the F<perl> of the future will have on the CPAN of the present.

And that is precisely what we have done at NYCBUG.

=head2 The NYCBUG-NY.pm collaboration

From the fall of 2017 into the spring of 2018, I was using my Debian Linux
Linode to test 1000 CPAN modules
at the top of the CPAN river against Perl 5 monthly development releases.
I posted that data on the L<Perl 5 Porters mailing
list|https://www.nntp.perl.org/group/perl.perl5.porters/> and it was used to
evaluate our readiness for the F<perl-5.28.0> production release.  However, I
came to feel (i) that 1000 was too small a sample; and (ii) running this QA
exercise just on Linux was likely to hide problems which could occur on other
operating systems.  I decided to test monthly development releases against the
3000 CPAN distributions highest upstream on the CPAN river and to do so on
FreeBSD.  I further recognized that the FreeBSD VMs sitting on my laptop were
inadequate for this task and that I needed to collaborate with people who knew
more about system management and VM management than I ever would.

So early this year I approached the NYCBUG Admin team about securing server
space in the NYCBUG rack at NYInternet.  George Rosamond thought this was a
good idea and Mark Saad came forward to be the point person for NYCBUG on this
collaboration.  Mark installed a server whose hostname is
F<perlmonger.nycbug.org> large enough to hold a variety of virtual machines
that could be configured for a variety of tasks with different versions of
FreeBSD, OpenBSD and so forth.  I spoke about this project at the March
technical meeting of New York Perlmongers (NY.pm).  Andrew Villano, an
experienced system administrator on Windows and Linux, was in attendance that
evening.  He was eager to learn BSD sysadmin skills and so he stepped forward
to help.  We quickly realized that the FreeBSD VMs you get "off the rack" from
Vagrant's website were too small to hold the data that would accumulate over
the course of an annual development cycle.  Andrew figured out how to enlarge
a VM; I'm now going to ask him to describe that process.

=head2 Testing Perl monthly development releases against CPAN on FreeBSD

Once we had a properly sized FreeBSD VM sitting on the host, we had to prepare
it for use in our QA process.  If you're trying to install 3000 CPAN modules,
chances are that many of them have external dependencies -- mainly C libraries
which would have to be installed with the FreeBSD F<pkg> utility.  We
conducted several dry-runs and, as we learned the scope of packages that we
needed to install, we added those packages to the
L<F<Vagrantfile>|https://github.com/nyperlmongers/nypm-nycbug-associates/blob/master/configs/Vagrantfile.larger-storage>
we used to govern the VM, as well as adding the CPAN modules which we needed
to run the I<test-against-dev> program.  We installed a F<crontab> entry which
runs daily and "listens" for a new Perl 5 monthly developmental release.  Once
a month, generally soon after the 20th, the program downloads a tarball of a
monthly development release, installs it, then works through a list of 3000
CPAN modules, trying to install them in dependency order.  When we're done, we
parse the installation log to write the results of that installation to a JSON
file for each module.  Then we tabulate the results into a
monthly pipe-separated-values file, which is in turn appended to a master PSV
file tallying the results of this year's annual developmental cycle.  We store
the results in our
L<github repository|https://github.com/nyperlmongers/nypm-nycbug-associates/tree/master/results/perl-5.29-cycle>
and run certain analytics programs which we
L<report to the Perl 5 Porters mailing list|https://www.nntp.perl.org/group/perl.perl5.porters/2018/08/msg251924.html>
mailing list.

=head2 Impacts

From the Perl point-of-view, the purpose of the test-against-dev project is to
promote the viability of Perl and CPAN as an ecosphere in which technological
applications can be implemented and run in production.  The project alerts
core language developers to possible adverse impacts of changes in the core
distribution on important CPAN libraries.  It also enables us to alert key
CPAN developers as to where their libraries need to change to adapt to the
ongoing development of the Perl 5 language.  In particular, by running this QA
project on FreeBSD we bring to light places where overly Linux-centric
developers need to adapt their code to work on a wide variety of OSes.

In a more subtle way, this project has a benefit for BSD as well.  If we use
FreeBSD to demonstrate that the Perl/CPAN ecosphere continues to be viable for
application development as the core language develops, then we also
demonstrate that FreeBSD continues to be a viable platform on which to run
applications in what is still one of the most popular, "high-level", dynamic
programming languages.  In short, we enhance the viability of FreeBSD itself.

And that's the result of a collaboration between NYCBUG and New York
Perlmongers.

Thank you very much.

=cut

